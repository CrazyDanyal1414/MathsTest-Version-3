<?xml version="1.0"?>
<doc>
    <assembly>
        <name>DeepCopier</name>
    </assembly>
    <members>
        <member name="T:DeepCopier.Copier">
            <summary>
            The class that can deep copy object by Expression Tree
            利用表达式树实现深拷贝的类
            </summary>
        </member>
        <member name="M:DeepCopier.Copier.Copy``2(``0)">
            <summary>
            Create a new instance of the target type,
            and deep copy the property values of the given source object into the target instance
            新建目标类型实例，并将源对象的属性值拷贝至目标对象的对应属性
            </summary>
            <typeparam name="TSource">The type of source object 源对象类型</typeparam>
            <typeparam name="TTarget">The type of target object 目标对象类型</typeparam>
            <param name="source">The source object 源对象实例</param>
            <returns>
            A new instance of the target type
            深拷贝了源对象属性的目标对象实例
            </returns>
        </member>
        <member name="M:DeepCopier.Copier.Copy``1(``0)">
            <summary>
            Deep copy the source object
            对源对象进行深拷贝
            </summary>
            <typeparam name="T">The type of source obejct 对象类型</typeparam>
            <param name="source">The source obejct 源对象</param>
            <returns>
            A deep copied instance of source obejct
            深拷贝的对象实例
            </returns>
        </member>
        <member name="M:DeepCopier.Copier.Copy``2(``0,``1)">
            <summary>
            Copy the property values of the given source object into the existing target object
            将源对象的属性值拷贝至已存在的目标对象的对应属性
            </summary>
            <typeparam name="TSource">The type of source object 源对象类型</typeparam>
            <typeparam name="TTarget">The type of target object 目标对象类型</typeparam>
            <param name="source">The source object 源对象实例</param>
            <param name="target">The target object 目标对象实例</param>
        </member>
        <member name="T:DeepCopier.Copier`2">
            <summary>
            利用表达式树实现深拷贝的类
            </summary>
            <typeparam name="TSource">源对象类型</typeparam>
            <typeparam name="TTarget">目标对象类型</typeparam>
        </member>
        <member name="M:DeepCopier.Copier`2.Copy(`0)">
            <summary>
            新建目标类型实例，并将源对象的属性值拷贝至目标对象的对应属性
            </summary>
            <param name="source">源对象实例</param>
            <returns>深拷贝了源对象属性的目标对象实例</returns>
        </member>
        <member name="M:DeepCopier.Copier`2.Copy(`0,`1)">
            <summary>
            新建目标类型实例，并将源对象的属性值拷贝至目标对象的对应属性
            </summary>
            <param name="source">源对象实例</param>
            <param name="target">目标对象实例</param>
        </member>
        <member name="T:DeepCopier.EnumerableCopier">
            <summary>
            可遍历类型拷贝器
            </summary>
        </member>
        <member name="M:DeepCopier.EnumerableCopier.GetMethondInfo(System.Type)">
            <summary>
            根据IEnumerable的实现类类型选择合适的拷贝方法
            </summary>
            <param name="type">IEnumerable的实现类类型</param>
            <returns>拷贝方法信息</returns>
        </member>
        <member name="M:DeepCopier.EnumerableCopier.CopyICollection``2(``0)">
            <summary>
            拷贝List
            </summary>
            <typeparam name="T">源ICollection实现类类型</typeparam>
            <typeparam name="TElement">源ICollection元素类型</typeparam>
            <param name="source">源ICollection对象</param>
            <returns>深拷贝完成的ICollection对象</returns>
        </member>
        <member name="M:DeepCopier.EnumerableCopier.CopyArray``1(``0[])">
            <summary>
            拷贝数组
            </summary>
            <typeparam name="TElement">源数组元素类型</typeparam>
            <param name="source">源List</param>
            <returns>深拷贝完成的数组</returns>
        </member>
        <member name="T:DeepCopier.UnsupportedTypeException">
            <summary>
            对尚不支持的类型进行拷贝时抛出的异常
            </summary>
        </member>
        <member name="M:DeepCopier.UnsupportedTypeException.#ctor(System.Type)">
            <summary>
            用指定的类型初始化 DeepCopier.UnsupportedTypeException 类的新实例
            </summary>
            <param name="type">暂不支持的类型信息</param>
        </member>
        <member name="T:DeepCopier.Utils">
            <summary>
            工具类
            </summary>
        </member>
        <member name="M:DeepCopier.Utils.IsRefTypeExceptString(System.Type)">
            <summary>
            判断是否是string以外的引用类型
            </summary>
            <returns>True：是string以外的引用类型，False：不是string以外的引用类型</returns>
        </member>
        <member name="M:DeepCopier.Utils.IsIEnumerableExceptString(System.Type)">
            <summary>
            判断是否是string以外的可遍历类型
            </summary>
            <returns>True：是string以外的可遍历类型，False：不是string以外的可遍历类型</returns>
        </member>
        <member name="M:DeepCopier.Utils.CreateNewInstance(System.Type)">
            <summary>
            创建指定类型实例
            </summary>
            <param name="type">类型信息</param>
            <returns>指定类型的实例</returns>
        </member>
    </members>
</doc>
